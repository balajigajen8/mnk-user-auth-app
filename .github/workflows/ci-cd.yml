name: CI/CD Pipeline for Laravel with ECR and EKS

on:
  push:
    branches:
      - main

jobs:
  provision-infrastructure:
    name: Provision Infrastructure
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1  # Region is specified here

    # Step 3: Deploy CloudFormation Stacks (optional steps)
    - name: Deploy EKS Stack
      run: |
        aws cloudformation deploy \
          --template-file infra/eks.yaml \
          --stack-name LaravelEKS \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Deploy DynamoDB Stack
      run: |
        aws cloudformation deploy \
          --template-file infra/dynamodb.yaml \
          --stack-name LaravelDynamoDB

    - name: Deploy ECR Stack
      run: |
        aws cloudformation deploy \
          --template-file infra/ecr.yaml \
          --stack-name LaravelECR

  build-and-deploy:
    name: Build and Deploy to EKS
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    # Step 3: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    # Step 4: Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        # Define the ECR repository URI
        IMAGE_URI=650251721226.dkr.ecr.ap-south-1.amazonaws.com/laravel-app:latest

        # Build the Docker image
        docker build -f docker/Dockerfile -t $IMAGE_URI .

        # Push the Docker image to ECR
        docker push $IMAGE_URI

    # Step 5: Update Kubernetes Config for EKS
    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ap-south-1 --name ${{ secrets.EKS_CLUSTER_NAME }}

    # Step 6: Deploy to EKS
    - name: Deploy to EKS
      run: |
        # Replace placeholder in Kubernetes deployment manifest with ECR image URI
        sed -i.bak "s|DOCKER_IMAGE|650251721226.dkr.ecr.ap-south-1.amazonaws.com/laravel-app:latest|g" k8s/deployment.yaml

        # Apply the updated manifests to EKS
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml

    # Step 7: Output EKS Service URL
    - name: Output EKS Service URL
      run: |
        echo "EKS service URL: http://$(kubectl get svc -o=jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')"
